{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "JColorsService",
            "id": "injectable-JColorsService-9dbe94b1599495ca2f39f2f7ecb00e63a574ef5dc345ffdb51e768935ab67676da1128690a19065d1886a755e8566d39ae4cd0336121a1d3e7e13dce2d6604ad",
            "file": "src/app/tailjng/color/colors.service.ts",
            "properties": [
                {
                    "name": "variants",
                    "defaultValue": "{\r\n        primary: 'bg-primary dark:bg-dark-primary text-white dark:text-white hover:bg-dark-primary dark:hover:bg-dark-primary/60 dark:hover:text-white shadow-md border border-dark-border dark:border-border',\r\n        primary_secondary: 'bg-none text-dark-border dark:text-border border border-dark-border dark:border-border hover:bg-dark-border/10 dark:hover:bg-border/10 shadow-md',\r\n        secondary: 'bg-background dark:bg-dark-background text-black border border-black dark:border-white dark:text-white hover:bg-accent dark:hover:bg-dark-accent/50',\r\n        \r\n        success: 'bg-green-500 hover:bg-green-600 text-white border border-green-300 dark:border-green-300 shadow-md',\r\n        success_secondary: 'bg-none text-green-500 border border-green-500 dark:border-green-600 hover:bg-green-500/10 dark:hover:bg-green-600/10 shadow-md',\r\n        \r\n        info: 'bg-blue-500 hover:bg-blue-600 text-white border border-blue-300 dark:border-blue-300 shadow-md',\r\n        info_secondary: 'bg-none text-blue-500 border border-blue-500 dark:border-blue-600 hover:bg-blue-500/10 dark:hover:bg-blue-600/10 shadow-md',\r\n        \r\n        warning: 'bg-yellow-600 hover:bg-yellow-700 text-white border border-yellow-500 dark:border-yellow-500 shadow-md',\r\n        warning_secondary: 'bg-none text-yellow-600 border border-yellow-600 dark:border-yellow-700 hover:bg-yellow-600/10 dark:hover:bg-yellow-700/10 shadow-md',\r\n        \r\n        question: 'bg-purple-500 hover:bg-purple-600 text-white border border-purple-400 dark:border-purple-400 shadow-md',\r\n        question_secondary: 'bg-none text-purple-500 border border-purple-500 dark:border-purple-600 hover:bg-purple-500/10 dark:hover:bg-purple-600/10 shadow-md',\r\n        \r\n        error: 'bg-red-500 hover:bg-red-600 text-white border border-red-400 dark:border-red-400 shadow-md',\r\n        error_secondary: 'bg-none text-red-500 border border-red-500 dark:border-red-600 hover:bg-red-500/10 dark:hover:bg-red-600/10 shadow-md',\r\n        \r\n        loading: 'bg-gray-500 hover:bg-gray-600 text-white border border-gray-400 dark:border-gray-400 shadow-md',\r\n        loading_secondary: 'bg-none text-gray-500 border border-gray-500 dark:border-gray-600 hover:bg-gray-500/10 dark:hover:bg-gray-600/10 shadow-md',\r\n\r\n        orange: 'bg-orange-500 hover:bg-orange-600 text-white border border-orange-300 dark:border-orange-300 shadow-md',\r\n        orange_secondary: 'bg-none text-orange-500 border border-orange-500 dark:border-orange-600 hover:bg-orange-500/10 dark:hover:bg-orange-600/10 shadow-md',\r\n\r\n        cyan: 'bg-cyan-500 hover:bg-cyan-600 text-white border border-cyan-300 dark:border-cyan-300 shadow-md',\r\n        cyan_secondary: 'bg-none text-cyan-500 border border-cyan-500 dark:border-cyan-600 hover:bg-cyan-500/10 dark:hover:bg-cyan-600/10 shadow-md',\r\n        \r\n        purple: 'bg-purple-500 hover:bg-purple-600 text-white border border-purple-300 dark:border-purple-300 shadow-md',\r\n        purple_secondary: 'bg-none text-purple-500 border border-purple-500 dark:border-purple-600 hover:bg-purple-500/10 dark:hover:bg-purple-600/10 shadow-md',\r\n        \r\n        teal: 'bg-teal-500 hover:bg-teal-600 text-white border border-teal-300 dark:border-teal-300 shadow-md',\r\n        teal_secondary: 'bg-none text-teal-500 border border-teal-500 dark:border-teal-600 hover:bg-teal-500/10 dark:hover:bg-teal-600/10 shadow-md',\r\n        \r\n        pink: 'bg-pink-500 hover:bg-pink-600 text-white border border-pink-300 dark:border-pink-300 shadow-md',\r\n        pink_secondary: 'bg-none text-pink-500 border border-pink-500 dark:border-pink-600 hover:bg-pink-500/10 dark:hover:bg-pink-600/10 shadow-md',\r\n        \r\n        green: 'bg-green-500 hover:bg-green-600 text-white border border-green-300 dark:border-green-300 shadow-md',\r\n        green_secondary: 'bg-none text-green-500 border border-green-500 dark:border-green-600 hover:bg-green-500/10 dark:hover:bg-green-600/10 shadow-md',\r\n\r\n        default: ' text-black dark:text-white shadow-md border border-dark-border dark:border-border',\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methods": [
                {
                    "name": "getAlertClass",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monocromatic",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"border-green-500 bg-green-50 dark:bg-[#15241f]\" | \"border-red-500 bg-red-50 dark:bg-[#21181c]\" | \"border-yellow-500 bg-yellow-50 dark:bg-[#1f1c1a]\" | \"border-blue-500 bg-blue-50 dark:bg-[#1a1a24]\" | \"border-purple-500 bg-purple-50 dark:bg-[#241732]\" | \"border-gray-500 bg-gray-50 dark:bg-[#15181e]\" | \"border-gray-50...",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monocromatic",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getButtonClass",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monocromatic",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monocromatic",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getButtonSecondaryClass",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monocromatic",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monocromatic",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIconClass",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monocromatic",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"text-green-500\" | \"text-red-500\" | \"text-yellow-500\" | \"text-blue-500\" | \"text-purple-500\" | \"text-gray-500\" | \"text-primary\"",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monocromatic",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVariantClass",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasShadow",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "hasBorder",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasShadow",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasBorder",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class JColorsService {\r\n\r\n    // Variants\r\n    variants: { [key: string]: string } = {\r\n        primary: 'bg-primary dark:bg-dark-primary text-white dark:text-white hover:bg-dark-primary dark:hover:bg-dark-primary/60 dark:hover:text-white shadow-md border border-dark-border dark:border-border',\r\n        primary_secondary: 'bg-none text-dark-border dark:text-border border border-dark-border dark:border-border hover:bg-dark-border/10 dark:hover:bg-border/10 shadow-md',\r\n        secondary: 'bg-background dark:bg-dark-background text-black border border-black dark:border-white dark:text-white hover:bg-accent dark:hover:bg-dark-accent/50',\r\n        \r\n        success: 'bg-green-500 hover:bg-green-600 text-white border border-green-300 dark:border-green-300 shadow-md',\r\n        success_secondary: 'bg-none text-green-500 border border-green-500 dark:border-green-600 hover:bg-green-500/10 dark:hover:bg-green-600/10 shadow-md',\r\n        \r\n        info: 'bg-blue-500 hover:bg-blue-600 text-white border border-blue-300 dark:border-blue-300 shadow-md',\r\n        info_secondary: 'bg-none text-blue-500 border border-blue-500 dark:border-blue-600 hover:bg-blue-500/10 dark:hover:bg-blue-600/10 shadow-md',\r\n        \r\n        warning: 'bg-yellow-600 hover:bg-yellow-700 text-white border border-yellow-500 dark:border-yellow-500 shadow-md',\r\n        warning_secondary: 'bg-none text-yellow-600 border border-yellow-600 dark:border-yellow-700 hover:bg-yellow-600/10 dark:hover:bg-yellow-700/10 shadow-md',\r\n        \r\n        question: 'bg-purple-500 hover:bg-purple-600 text-white border border-purple-400 dark:border-purple-400 shadow-md',\r\n        question_secondary: 'bg-none text-purple-500 border border-purple-500 dark:border-purple-600 hover:bg-purple-500/10 dark:hover:bg-purple-600/10 shadow-md',\r\n        \r\n        error: 'bg-red-500 hover:bg-red-600 text-white border border-red-400 dark:border-red-400 shadow-md',\r\n        error_secondary: 'bg-none text-red-500 border border-red-500 dark:border-red-600 hover:bg-red-500/10 dark:hover:bg-red-600/10 shadow-md',\r\n        \r\n        loading: 'bg-gray-500 hover:bg-gray-600 text-white border border-gray-400 dark:border-gray-400 shadow-md',\r\n        loading_secondary: 'bg-none text-gray-500 border border-gray-500 dark:border-gray-600 hover:bg-gray-500/10 dark:hover:bg-gray-600/10 shadow-md',\r\n\r\n        orange: 'bg-orange-500 hover:bg-orange-600 text-white border border-orange-300 dark:border-orange-300 shadow-md',\r\n        orange_secondary: 'bg-none text-orange-500 border border-orange-500 dark:border-orange-600 hover:bg-orange-500/10 dark:hover:bg-orange-600/10 shadow-md',\r\n\r\n        cyan: 'bg-cyan-500 hover:bg-cyan-600 text-white border border-cyan-300 dark:border-cyan-300 shadow-md',\r\n        cyan_secondary: 'bg-none text-cyan-500 border border-cyan-500 dark:border-cyan-600 hover:bg-cyan-500/10 dark:hover:bg-cyan-600/10 shadow-md',\r\n        \r\n        purple: 'bg-purple-500 hover:bg-purple-600 text-white border border-purple-300 dark:border-purple-300 shadow-md',\r\n        purple_secondary: 'bg-none text-purple-500 border border-purple-500 dark:border-purple-600 hover:bg-purple-500/10 dark:hover:bg-purple-600/10 shadow-md',\r\n        \r\n        teal: 'bg-teal-500 hover:bg-teal-600 text-white border border-teal-300 dark:border-teal-300 shadow-md',\r\n        teal_secondary: 'bg-none text-teal-500 border border-teal-500 dark:border-teal-600 hover:bg-teal-500/10 dark:hover:bg-teal-600/10 shadow-md',\r\n        \r\n        pink: 'bg-pink-500 hover:bg-pink-600 text-white border border-pink-300 dark:border-pink-300 shadow-md',\r\n        pink_secondary: 'bg-none text-pink-500 border border-pink-500 dark:border-pink-600 hover:bg-pink-500/10 dark:hover:bg-pink-600/10 shadow-md',\r\n        \r\n        green: 'bg-green-500 hover:bg-green-600 text-white border border-green-300 dark:border-green-300 shadow-md',\r\n        green_secondary: 'bg-none text-green-500 border border-green-500 dark:border-green-600 hover:bg-green-500/10 dark:hover:bg-green-600/10 shadow-md',\r\n\r\n        default: ' text-black dark:text-white shadow-md border border-dark-border dark:border-border',\r\n    };\r\n\r\n    // Function to get variant with optional border and shadow\r\n    getVariantClass(type: string, hasShadow: boolean = true, hasBorder: boolean = true): string {\r\n        let classStr = this.variants[type] || this.variants['default']; // Default to 'default' variant if type is invalid\r\n\r\n        // Toggle shadow and border based on flags\r\n        if (!hasShadow) {\r\n            classStr = classStr.replace('shadow-md', ''); // Remove shadow if not needed\r\n        }\r\n\r\n        if (!hasBorder) {\r\n            classStr = classStr.replace(/border-[\\w-]+/, ''); // Remove border if not needed\r\n        }\r\n\r\n        return classStr;\r\n    }\r\n\r\n    // Alerts\r\n    getAlertClass(type: string, monocromatic: boolean) {\r\n        if (!monocromatic) {\r\n            switch (type) {\r\n                case 'success': return 'border-green-500 bg-green-50 dark:bg-[#15241f]';\r\n                case 'error': return 'border-red-500 bg-red-50 dark:bg-[#21181c]';\r\n                case 'warning': return 'border-yellow-500 bg-yellow-50 dark:bg-[#1f1c1a]';\r\n                case 'info': return 'border-blue-500 bg-blue-50 dark:bg-[#1a1a24]';\r\n                case 'question': return 'border-purple-500 bg-purple-50 dark:bg-[#241732]';\r\n                case 'loading': return 'border-gray-500 bg-gray-50 dark:bg-[#15181e]';\r\n                default: return 'border-gray-500';\r\n            }\r\n        } else {\r\n            return 'bg-white dark:bg-foreground border-border dark:border-dark-border';\r\n        }\r\n    }\r\n\r\n    // Icons\r\n    getIconClass(type: string, monocromatic: boolean) {\r\n        if (!monocromatic) {\r\n            switch (type) {\r\n                case 'success': return 'text-green-500';\r\n                case 'error': return 'text-red-500';\r\n                case 'warning': return 'text-yellow-500';\r\n                case 'info': return 'text-blue-500';\r\n                case 'question': return 'text-purple-500';\r\n                case 'loading': return 'text-gray-500';\r\n                default: return 'text-primary';\r\n            }\r\n        } else {\r\n            return 'text-primary';\r\n        }\r\n    }\r\n\r\n    // Buttons primary\r\n    getButtonClass(type: string, monocromatic: boolean): { [key: string]: boolean } {\r\n        if (!monocromatic) {\r\n            switch (type) {\r\n                case 'success': return { 'success': true };\r\n                case 'error': return { 'error': true };\r\n                case 'warning': return { 'warning': true };\r\n                case 'info': return { 'info': true };\r\n                case 'question': return { 'question': true };\r\n                case 'loading': return { 'loading': true };\r\n                default: return { 'primary': true };\r\n            }\r\n        } else {\r\n            return { 'primary': true };\r\n        }\r\n    }\r\n\r\n    // Buttons secondary\r\n    getButtonSecondaryClass(type: string, monocromatic: boolean): { [key: string]: boolean } {\r\n        if (!monocromatic) {\r\n            switch (type) {\r\n                case 'success': return { 'success_secondary': true };\r\n                case 'error': return { 'error_secondary': true };\r\n                case 'warning': return { 'warning_secondary': true };\r\n                case 'info': return { 'info_secondary': true };\r\n                case 'question': return { 'question_secondary': true };\r\n                case 'loading': return { 'loading_secondary': true };\r\n                default: return { 'secondary': true };\r\n            }\r\n        } else {\r\n            return { 'secondary': true };\r\n        }\r\n    }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "JTooltipService",
            "id": "injectable-JTooltipService-bdf534661cbde78cab51208f80dc4067a11b8e57f5bc1e75b4b01e09b8b115b058d31fecc6f4b73f6ef169106e8205f13da9a02faf4c8d5e4a8499923691bd21",
            "file": "src/app/tailjng/tooltip/tooltip.service.ts",
            "properties": [
                {
                    "name": "arrowElement",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "offsetX",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "offsetY",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "showArrow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltipElement",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip if it is currently displayed.\n* This method sets the tooltip's opacity to 0, scales it down, and hides it from view.\n",
                    "description": "<p>Hide the tooltip if it is currently displayed.</p>\n<ul>\n<li>This method sets the tooltip&#39;s opacity to 0, scales it down, and hides it from view.</li>\n</ul>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 5047,
                                "end": 5054,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "positionAbsolute",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "position",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPosition the tooltip absolutely relative to the target element.\n",
                    "description": "<p>Position the tooltip absolutely relative to the target element.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5430,
                                "end": 5436,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "target"
                            },
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5424,
                                "end": 5429,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The target element to position the tooltip against.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5502,
                                "end": 5510,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "position"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5496,
                                "end": 5501,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The position of the tooltip (top, bottom, left, right).</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5574,
                                "end": 5581,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "position",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"top\""
                        },
                        {
                            "name": "showArrow",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "offsetX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "offsetY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the tooltip with the specified content, target element, position, arrow visibility, and offsets.\n",
                    "description": "<p>Show the tooltip with the specified content, target element, position, arrow visibility, and offsets.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1753,
                                "end": 1760,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "content"
                            },
                            "type": "string | HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1747,
                                "end": 1752,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The content to display in the tooltip.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1813,
                                "end": 1819,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "target"
                            },
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1807,
                                "end": 1812,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The target element to attach the tooltip to.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1878,
                                "end": 1886,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "position"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"top\"",
                            "tagName": {
                                "pos": 1872,
                                "end": 1877,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The position of the tooltip relative to the target element.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1960,
                                "end": 1969,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "showArrow"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 1954,
                                "end": 1959,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Whether to show the arrow pointing to the target element.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2041,
                                "end": 2048,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "offsetX"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "pos": 2035,
                                "end": 2040,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The horizontal offset of the tooltip.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2100,
                                "end": 2107,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "offsetY"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "pos": 2094,
                                "end": 2099,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The vertical offset of the tooltip.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2151,
                                "end": 2158,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Renderer2, RendererFactory2 } from \"@angular/core\"\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JTooltipService {\r\n\r\n  private readonly renderer: Renderer2;\r\n\r\n  private tooltipElement: HTMLElement | null = null;\r\n  private arrowElement: HTMLElement | null = null;\r\n  private showArrow = true;\r\n\r\n  private offsetX = 0;\r\n  private offsetY = 0;\r\n\r\n  constructor(rendererFactory: RendererFactory2) {\r\n    this.renderer = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n\r\n  /**\r\n   * Show the tooltip with the specified content, target element, position, arrow visibility, and offsets.\r\n   * @param content The content to display in the tooltip.\r\n   * @param target The target element to attach the tooltip to.\r\n   * @param position The position of the tooltip relative to the target element.\r\n   * @param showArrow Whether to show the arrow pointing to the target element.\r\n   * @param offsetX The horizontal offset of the tooltip.\r\n   * @param offsetY The vertical offset of the tooltip.\r\n   * @returns \r\n   */\r\n  show(\r\n    content: string | HTMLElement,\r\n    target: HTMLElement,\r\n    position = \"top\",\r\n    showArrow = true,\r\n    offsetX = 0,\r\n    offsetY = 0,\r\n  ) {\r\n    if (!content || !target) return\r\n\r\n    this.hide()\r\n    this.showArrow = showArrow\r\n    this.offsetX = offsetX\r\n    this.offsetY = offsetY\r\n\r\n    if (!this.tooltipElement) {\r\n      this.tooltipElement = this.renderer.createElement(\"div\")\r\n      this.renderer.addClass(this.tooltipElement, \"j-tooltip\")\r\n      this.renderer.setStyle(this.tooltipElement, \"position\", \"absolute\")\r\n      this.renderer.setStyle(this.tooltipElement, \"z-index\", \"9999\")\r\n      this.renderer.setStyle(this.tooltipElement, \"background-color\", \"#333\")\r\n      this.renderer.setStyle(this.tooltipElement, \"color\", \"white\")\r\n      this.renderer.setStyle(this.tooltipElement, \"padding\", \"0.5rem\")\r\n      this.renderer.setStyle(this.tooltipElement, \"border-radius\", \"0.25rem\")\r\n      this.renderer.setStyle(this.tooltipElement, \"font-size\", \"0.875rem\")\r\n      this.renderer.setStyle(this.tooltipElement, \"pointer-events\", \"none\")\r\n      this.renderer.setStyle(this.tooltipElement, \"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\r\n      this.renderer.setStyle(this.tooltipElement, \"max-width\", \"230px\")\r\n      this.renderer.setStyle(this.tooltipElement, \"word-wrap\", \"break-word\")\r\n      this.renderer.setStyle(this.tooltipElement, \"transition\", \"opacity 0.2s ease, transform 0.2s ease\")\r\n\r\n      this.arrowElement = this.renderer.createElement(\"div\")\r\n      this.renderer.setStyle(this.arrowElement, \"position\", \"absolute\")\r\n      this.renderer.setStyle(this.arrowElement, \"width\", \"0\")\r\n      this.renderer.setStyle(this.arrowElement, \"height\", \"0\")\r\n      this.renderer.setStyle(this.arrowElement, \"border-style\", \"solid\")\r\n    }\r\n\r\n    if (this.tooltipElement) {\r\n      while (this.tooltipElement.firstChild) {\r\n        this.tooltipElement.removeChild(this.tooltipElement.firstChild)\r\n      }\r\n    }\r\n\r\n    if (typeof content === \"string\") {\r\n      this.tooltipElement!.textContent = content\r\n    } else if (content instanceof HTMLElement) {\r\n      this.renderer.appendChild(this.tooltipElement!, content.cloneNode(true))\r\n    }\r\n\r\n    if (this.showArrow) {\r\n      this.renderer.appendChild(this.tooltipElement!, this.arrowElement!)\r\n    }\r\n\r\n    this.renderer.appendChild(document.body, this.tooltipElement)\r\n    this.renderer.setStyle(this.tooltipElement, \"opacity\", \"0\")\r\n    this.renderer.setStyle(this.tooltipElement, \"transform\", \"scale(1)\")\r\n    this.renderer.setStyle(this.tooltipElement, \"display\", \"block\")\r\n\r\n    this.positionAbsolute(target, position)\r\n\r\n    requestAnimationFrame(() => {\r\n      this.renderer.setStyle(this.tooltipElement!, \"opacity\", \"1\")\r\n    })\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Hide the tooltip if it is currently displayed.\r\n   * * This method sets the tooltip's opacity to 0, scales it down, and hides it from view.\r\n   * @returns\r\n   */\r\n  hide() {\r\n    if (this.tooltipElement) {\r\n      this.renderer.setStyle(this.tooltipElement, \"opacity\", \"0\")\r\n      this.renderer.setStyle(this.tooltipElement, \"transform\", \"scale(0.95)\")\r\n      this.renderer.setStyle(this.tooltipElement, \"display\", \"none\")\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Position the tooltip absolutely relative to the target element.\r\n   * @param target The target element to position the tooltip against.\r\n   * @param position The position of the tooltip (top, bottom, left, right).\r\n   * @returns\r\n   */\r\n  positionAbsolute(target: HTMLElement, position: string) {\r\n    if (!this.tooltipElement) return\r\n\r\n    const tooltipRect = this.tooltipElement.getBoundingClientRect()\r\n    const targetRect = target.getBoundingClientRect()\r\n\r\n    const arrowSize = 6\r\n    let left = 0\r\n    let top = 0\r\n\r\n    if (this.showArrow && this.arrowElement) {\r\n      this.renderer.setStyle(this.arrowElement, \"border-width\", `${arrowSize}px`)\r\n      this.renderer.setStyle(this.arrowElement, \"border-color\", \"transparent\")\r\n      this.renderer.setStyle(this.arrowElement, \"top\", \"\")\r\n      this.renderer.setStyle(this.arrowElement, \"bottom\", \"\")\r\n      this.renderer.setStyle(this.arrowElement, \"left\", \"\")\r\n      this.renderer.setStyle(this.arrowElement, \"right\", \"\")\r\n    }\r\n\r\n    switch (position) {\r\n      case \"top\":\r\n        left = targetRect.left + targetRect.width / 2 - tooltipRect.width / 2 + this.offsetX\r\n        top = targetRect.top - tooltipRect.height - arrowSize + this.offsetY\r\n        if (this.showArrow && this.arrowElement) {\r\n          this.renderer.setStyle(this.arrowElement, \"bottom\", `-5px`)\r\n          this.renderer.setStyle(this.arrowElement, \"left\", `calc(50% - ${arrowSize}px)`)\r\n          this.renderer.setStyle(this.arrowElement, \"border-top-color\", \"#333\")\r\n          this.renderer.setStyle(this.arrowElement, \"border-bottom-width\", \"0\")\r\n        }\r\n        break\r\n\r\n      case \"bottom\":\r\n        left = targetRect.left + targetRect.width / 2 - tooltipRect.width / 2 + this.offsetX\r\n        top = targetRect.bottom + arrowSize + this.offsetY\r\n        if (this.showArrow && this.arrowElement) {\r\n          this.renderer.setStyle(this.arrowElement, \"top\", `-5px`)\r\n          this.renderer.setStyle(this.arrowElement, \"left\", `calc(50% - ${arrowSize}px)`)\r\n          this.renderer.setStyle(this.arrowElement, \"border-bottom-color\", \"#333\")\r\n          this.renderer.setStyle(this.arrowElement, \"border-top-width\", \"0\")\r\n        }\r\n        break\r\n\r\n      case \"left\":\r\n        left = targetRect.left - tooltipRect.width - arrowSize + this.offsetX\r\n        top = targetRect.top + targetRect.height / 2 - tooltipRect.height / 2 + this.offsetY\r\n        if (this.showArrow && this.arrowElement) {\r\n          this.renderer.setStyle(this.arrowElement, \"right\", `-5px`)\r\n          this.renderer.setStyle(this.arrowElement, \"top\", `calc(50% - ${arrowSize}px)`)\r\n          this.renderer.setStyle(this.arrowElement, \"border-left-color\", \"#333\")\r\n          this.renderer.setStyle(this.arrowElement, \"border-right-width\", \"0\")\r\n        }\r\n        break\r\n\r\n      case \"right\":\r\n        left = targetRect.right + arrowSize + this.offsetX\r\n        top = targetRect.top + targetRect.height / 2 - tooltipRect.height / 2 + this.offsetY\r\n        if (this.showArrow && this.arrowElement) {\r\n          this.renderer.setStyle(this.arrowElement, \"left\", `-5px`)\r\n          this.renderer.setStyle(this.arrowElement, \"top\", `calc(50% - ${arrowSize}px)`)\r\n          this.renderer.setStyle(this.arrowElement, \"border-right-color\", \"#333\")\r\n          this.renderer.setStyle(this.arrowElement, \"border-left-width\", \"0\")\r\n        }\r\n        break\r\n    }\r\n\r\n    this.renderer.setStyle(this.tooltipElement, \"left\", `${left + window.scrollX}px`)\r\n    this.renderer.setStyle(this.tooltipElement, \"top\", `${top + window.scrollY}px`)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "JTooltipDirective",
            "id": "directive-JTooltipDirective-feb8aaa81dd674770f5669acb2b8e417eada3e03f4261a07dcb1f621754e2ca2a045090a9b90d0df0661f782f4366a42465dbdb643d958602303b90e66d0a068",
            "file": "src/app/tailjng/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnDestroy, HostListener, NgZone, TemplateRef, ViewContainerRef, } from \"@angular/core\"\r\nimport { JTooltipService } from \"./tooltip.service\"\r\n\r\n@Directive({\r\n  selector: '[jTooltip]'\r\n})\r\nexport class JTooltipDirective implements OnDestroy {\r\n\r\n  @Input(\"jTooltip\") content!: string | TemplateRef<any>;\r\n\r\n  @Input() jTooltipPosition: \"top\" | \"right\" | \"bottom\" | \"left\" = \"top\";\r\n  @Input() jTooltipShowArrow = true;\r\n\r\n  @Input() jTooltipOffsetX = 0;\r\n  @Input() jTooltipOffsetY = 0;\r\n\r\n  private mouseTrackingInterval: any;\r\n  private touchStartTimer: any;\r\n  touchStartTime: number = 0;\r\n  private readonly touchHoldDelay: number = 500;\r\n\r\n  private isTooltipVisible: boolean = false;\r\n  private readonly isTouchDevice: boolean = false;\r\n  private hasShownTooltip: boolean = false;\r\n\r\n  private lastMousePosition: { clientX: number; clientY: number } | null = null\r\n\r\n  constructor(\r\n    private readonly el: ElementRef,\r\n    private readonly tooltipService: JTooltipService,\r\n    private readonly zone: NgZone,\r\n    private readonly viewContainerRef: ViewContainerRef,\r\n  ) {\r\n    // Detected tactile devices\r\n    this.isTouchDevice = \"ontouchstart\" in window || navigator.maxTouchPoints > 0\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.stopMouseTracking()\r\n\r\n    // Clean up touch start timer if it exists\r\n    if (this.touchStartTimer) {\r\n      clearTimeout(this.touchStartTimer)\r\n      this.touchStartTimer = null\r\n    }\r\n\r\n    this.tooltipService.hide()\r\n  }\r\n\r\n  // ==========================================================\r\n  // Events desktop (mouse)\r\n  // ==========================================================\r\n\r\n  /**\r\n   * Show the tooltip on mouse enter.\r\n   * If the device is touch, it will not show the tooltip.\r\n   * @returns \r\n   */\r\n  @HostListener(\"mouseenter\")\r\n  onMouseEnter() {\r\n    if (this.isTouchDevice) return;\r\n    this.show();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Hide the tooltip on mouse leave.\r\n   * If the device is touch, it will not hide the tooltip.\r\n   * @returns \r\n   */\r\n  @HostListener(\"mouseleave\")\r\n  onMouseLeave() {\r\n    if (this.isTouchDevice) return;\r\n    this.hide();\r\n  }\r\n\r\n  // ==========================================================\r\n  // Events mobile (touch)\r\n  // ==========================================================\r\n\r\n  /**\r\n   * Show the tooltip on touch start.\r\n   * If the device is not touch, it will not show the tooltip.\r\n   * @param event \r\n   * @returns \r\n   */\r\n  @HostListener(\"touchstart\", [\"$event\"])\r\n  onTouchStart(event: TouchEvent) {\r\n    if (!this.isTouchDevice) return;\r\n\r\n    this.touchStartTime = Date.now()\r\n    this.hasShownTooltip = false;\r\n\r\n    // Init timer to show tooltip after delay\r\n    this.touchStartTimer = setTimeout(() => {\r\n      this.hasShownTooltip = true;\r\n      this.show();\r\n    }, this.touchHoldDelay)\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Hide the tooltip on touch end.\r\n   * If the device is not touch, it will not hide the tooltip.\r\n   * @param event \r\n   * @returns \r\n   */\r\n  @HostListener(\"touchend\", [\"$event\"])\r\n  onTouchEnd(event: TouchEvent) {\r\n    if (!this.isTouchDevice) return;\r\n\r\n    // Cancel the timer if released before the delay\r\n    if (this.touchStartTimer) {\r\n      clearTimeout(this.touchStartTimer)\r\n      this.touchStartTimer = null;\r\n    }\r\n\r\n    // Hide tooltip if it is visible\r\n    if (this.isTooltipVisible) {\r\n      this.hide();\r\n    }\r\n\r\n    // If the tooltip was shown, prevent default action\r\n    if (this.hasShownTooltip) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Hide the tooltip on touch cancel.\r\n   * If the device is not touch, it will not hide the tooltip.\r\n   * @param event \r\n   * @returns \r\n   */\r\n  @HostListener(\"touchcancel\", [\"$event\"])\r\n  onTouchCancel(event: TouchEvent) {\r\n    if (!this.isTouchDevice) return;\r\n\r\n    // Cancel the timer if it exists\r\n    if (this.touchStartTimer) {\r\n      clearTimeout(this.touchStartTimer)\r\n      this.touchStartTimer = null;\r\n    }\r\n\r\n    // Hide the tooltip if it is visible\r\n    if (this.isTooltipVisible) {\r\n      this.hide();\r\n    }\r\n\r\n    this.hasShownTooltip = false;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Handle touch move events.\r\n   * If the device is not touch, it will not handle the event.\r\n   * @param event \r\n   * @returns \r\n   */\r\n  @HostListener(\"touchmove\", [\"$event\"])\r\n  onTouchMove(event: TouchEvent) {\r\n    if (!this.isTouchDevice) return;\r\n\r\n    // If the finger moves too much, cancel the tooltip\r\n    const touch = event.touches[0]\r\n    const rect = this.el.nativeElement.getBoundingClientRect()\r\n\r\n    // Check if the finger is still inside the element\r\n    const isInsideElement =\r\n      touch.clientX >= rect.left &&\r\n      touch.clientX <= rect.right &&\r\n      touch.clientY >= rect.top &&\r\n      touch.clientY <= rect.bottom\r\n\r\n    if (!isInsideElement) {\r\n      // Cancel the timer if the finger leaves the element\r\n      if (this.touchStartTimer) {\r\n        clearTimeout(this.touchStartTimer)\r\n        this.touchStartTimer = null\r\n      }\r\n\r\n      // Hide the tooltip if it is visible\r\n      if (this.isTooltipVisible) {\r\n        this.hide()\r\n      }\r\n\r\n      this.hasShownTooltip = false\r\n    }\r\n  }\r\n\r\n  // ==========================================================\r\n  // Functions\r\n  // ==========================================================\r\n\r\n  /**\r\n   * Show the tooltip with the specified content, target element, position, arrow visibility, and offsets.\r\n   * This method creates the tooltip element, sets its content, and positions it relative to the target element.\r\n   * @returns \r\n   */\r\n  private show() {\r\n    if (!this.content) return;\r\n\r\n    this.isTooltipVisible = true;\r\n\r\n    // Only start mouse tracking on desktop\r\n    if (!this.isTouchDevice) {\r\n      this.startMouseTracking();\r\n    }\r\n\r\n    this.zone.runOutsideAngular(() => {\r\n      let finalContent: string | HTMLElement = \"\"\r\n\r\n      if (this.content instanceof TemplateRef) {\r\n        const view = this.content.createEmbeddedView({});\r\n        this.viewContainerRef.insert(view);\r\n        view.detectChanges();\r\n\r\n        const fragment = document.createElement(\"div\");\r\n        view.rootNodes.forEach((node) => fragment.appendChild(node.cloneNode(true)));\r\n        finalContent = fragment;\r\n\r\n        view.destroy();\r\n\r\n      } else {\r\n        finalContent = this.content;\r\n      }\r\n\r\n      this.tooltipService.show(\r\n        finalContent,\r\n        this.el.nativeElement,\r\n        this.jTooltipPosition,\r\n        this.jTooltipShowArrow,\r\n        this.jTooltipOffsetX,\r\n        this.jTooltipOffsetY,\r\n      )\r\n    })\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Start mouse tracking to update tooltip position.\r\n   * This method sets an interval to update the tooltip position based on mouse movements.\r\n   */\r\n  private hide() {\r\n    this.isTooltipVisible = false\r\n    this.stopMouseTracking()\r\n    this.zone.runOutsideAngular(() => {\r\n      this.tooltipService.hide()\r\n    })\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Stop mouse tracking by clearing the interval and removing global event listeners.\r\n   * This method ensures that no multiple intervals are running and cleans up the event listeners.\r\n   * @return\r\n   */\r\n  private startMouseTracking() {\r\n    this.stopMouseTracking();\r\n\r\n    this.zone.runOutsideAngular(() => {\r\n      this.mouseTrackingInterval = setInterval(() => {\r\n        if (!this.isTooltipVisible) return\r\n\r\n        // Obtener la posición actual del mouse\r\n        const mouseEvent = this.getLastMousePosition()\r\n        if (!mouseEvent) return\r\n\r\n        // Verificar si el mouse sigue sobre el elemento\r\n        const elementUnderMouse = document.elementFromPoint(mouseEvent.clientX, mouseEvent.clientY)\r\n        const isMouseOverElement =\r\n          this.el.nativeElement.contains(elementUnderMouse) || this.el.nativeElement === elementUnderMouse\r\n\r\n        if (!isMouseOverElement && this.isTooltipVisible) {\r\n          this.zone.run(() => {\r\n            this.hide()\r\n          })\r\n        }\r\n      }, 100)\r\n    })\r\n\r\n    // Add listener for global mouse move events\r\n    document.addEventListener(\"mousemove\", this.onGlobalMouseMove)\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Stop mouse tracking by clearing the interval and removing global event listeners.\r\n   * This method ensures that no multiple intervals are running and cleans up the event listeners.\r\n   * @returns\r\n   */\r\n  private stopMouseTracking() {\r\n    if (this.mouseTrackingInterval) {\r\n      clearInterval(this.mouseTrackingInterval)\r\n      this.mouseTrackingInterval = null\r\n    }\r\n    document.removeEventListener(\"mousemove\", this.onGlobalMouseMove)\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Handle global mouse move events.\r\n   * @param event The mouse event.\r\n   * @returns \r\n   */\r\n  private readonly onGlobalMouseMove = (event: MouseEvent) => {\r\n    this.lastMousePosition = { clientX: event.clientX, clientY: event.clientY }\r\n\r\n    if (!this.isTooltipVisible) return\r\n\r\n    // Verify if the mouse is still over the element\r\n    const elementUnderMouse = document.elementFromPoint(event.clientX, event.clientY)\r\n    const isMouseOverElement =\r\n      this.el.nativeElement.contains(elementUnderMouse) || this.el.nativeElement === elementUnderMouse\r\n\r\n    if (!isMouseOverElement) {\r\n      this.zone.run(() => {\r\n        this.hide()\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Get the last mouse position.\r\n   * This method returns the last recorded mouse position.\r\n   * @returns \r\n   */\r\n  private getLastMousePosition() {\r\n    return this.lastMousePosition\r\n  }\r\n\r\n}\r\n",
            "selector": "[jTooltip]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "jTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string | TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "jTooltipOffsetX",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "jTooltipOffsetY",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "jTooltipPosition",
                    "defaultValue": "\"top\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                    "decorators": []
                },
                {
                    "name": "jTooltipShowArrow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the tooltip on mouse enter.\nIf the device is touch, it will not show the tooltip.\n",
                    "description": "<p>Show the tooltip on mouse enter.\nIf the device is touch, it will not show the tooltip.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 2892,
                            "end": 2906,
                            "kind": 342,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 2893,
                                "end": 2900,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 90
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip on mouse leave.\nIf the device is touch, it will not hide the tooltip.\n",
                    "description": "<p>Hide the tooltip on mouse leave.\nIf the device is touch, it will not hide the tooltip.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 3138,
                            "end": 3152,
                            "kind": 342,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 3139,
                                "end": 3146,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 103
                },
                {
                    "name": "touchcancel",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip on touch cancel.\nIf the device is not touch, it will not hide the tooltip.\n",
                    "description": "<p>Hide the tooltip on touch cancel.\nIf the device is not touch, it will not hide the tooltip.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 4796,
                            "end": 4816,
                            "kind": 341,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 4797,
                                "end": 4802,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 4803,
                                "end": 4808,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 4816,
                            "end": 4830,
                            "kind": 342,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 4817,
                                "end": 4824,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 171
                },
                {
                    "name": "touchend",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip on touch end.\nIf the device is not touch, it will not hide the tooltip.\n",
                    "description": "<p>Hide the tooltip on touch end.\nIf the device is not touch, it will not hide the tooltip.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 4080,
                            "end": 4100,
                            "kind": 341,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 4081,
                                "end": 4086,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 4087,
                                "end": 4092,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 4100,
                            "end": 4114,
                            "kind": 342,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 4101,
                                "end": 4108,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 141
                },
                {
                    "name": "touchmove",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle touch move events.\nIf the device is not touch, it will not handle the event.\n",
                    "description": "<p>Handle touch move events.\nIf the device is not touch, it will not handle the event.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 5373,
                            "end": 5393,
                            "kind": 341,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 5374,
                                "end": 5379,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 5380,
                                "end": 5385,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 5393,
                            "end": 5407,
                            "kind": 342,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 5394,
                                "end": 5401,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 197
                },
                {
                    "name": "touchstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the tooltip on touch start.\nIf the device is not touch, it will not show the tooltip.\n",
                    "description": "<p>Show the tooltip on touch start.\nIf the device is not touch, it will not show the tooltip.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 3544,
                            "end": 3564,
                            "kind": 341,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 3545,
                                "end": 3550,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 3551,
                                "end": 3556,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 3564,
                            "end": 3578,
                            "kind": 342,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 3565,
                                "end": 3572,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 119
                }
            ],
            "propertiesClass": [
                {
                    "name": "hasShownTooltip",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isTooltipVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isTouchDevice",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "lastMousePosition",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mouseTrackingInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onGlobalMouseMove",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Handle global mouse move events.</p>\n",
                    "line": 346,
                    "rawdescription": "\n\nHandle global mouse move events.\n",
                    "modifierKind": [
                        123,
                        148
                    ],
                    "jsdoctags": [
                        {
                            "pos": 9735,
                            "end": 9771,
                            "kind": 341,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 9736,
                                "end": 9741,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mouse event.</p>\n",
                            "name": {
                                "pos": 9742,
                                "end": 9747,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 9771,
                            "end": 9785,
                            "kind": 342,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 9772,
                                "end": 9779,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "touchHoldDelay",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "touchStartTime",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "touchStartTimer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getLastMousePosition",
                    "args": [],
                    "optional": false,
                    "returnType": "{ clientX: number; clientY: number; }",
                    "typeParameters": [],
                    "line": 370,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the last mouse position.\nThis method returns the last recorded mouse position.\n",
                    "description": "<p>Get the last mouse position.\nThis method returns the last recorded mouse position.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 10476,
                                "end": 10483,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStart mouse tracking to update tooltip position.\nThis method sets an interval to update the tooltip position based on mouse movements.\n",
                    "description": "<p>Start mouse tracking to update tooltip position.\nThis method sets an interval to update the tooltip position based on mouse movements.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the tooltip on mouse enter.\nIf the device is touch, it will not show the tooltip.\n",
                    "description": "<p>Show the tooltip on mouse enter.\nIf the device is touch, it will not show the tooltip.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2893,
                                "end": 2900,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip on mouse leave.\nIf the device is touch, it will not hide the tooltip.\n",
                    "description": "<p>Hide the tooltip on mouse leave.\nIf the device is touch, it will not hide the tooltip.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3139,
                                "end": 3146,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onTouchCancel",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip on touch cancel.\nIf the device is not touch, it will not hide the tooltip.\n",
                    "description": "<p>Hide the tooltip on touch cancel.\nIf the device is not touch, it will not hide the tooltip.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'touchcancel', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4803,
                                "end": 4808,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4797,
                                "end": 4802,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 4817,
                                "end": 4824,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onTouchEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip on touch end.\nIf the device is not touch, it will not hide the tooltip.\n",
                    "description": "<p>Hide the tooltip on touch end.\nIf the device is not touch, it will not hide the tooltip.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'touchend', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4087,
                                "end": 4092,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4081,
                                "end": 4086,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 4101,
                                "end": 4108,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onTouchMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle touch move events.\nIf the device is not touch, it will not handle the event.\n",
                    "description": "<p>Handle touch move events.\nIf the device is not touch, it will not handle the event.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'touchmove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5380,
                                "end": 5385,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5374,
                                "end": 5379,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 5394,
                                "end": 5401,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onTouchStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the tooltip on touch start.\nIf the device is not touch, it will not show the tooltip.\n",
                    "description": "<p>Show the tooltip on touch start.\nIf the device is not touch, it will not show the tooltip.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'touchstart', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3551,
                                "end": 3556,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3545,
                                "end": 3550,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 3565,
                                "end": 3572,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the tooltip with the specified content, target element, position, arrow visibility, and offsets.\nThis method creates the tooltip element, sets its content, and positions it relative to the target element.\n",
                    "description": "<p>Show the tooltip with the specified content, target element, position, arrow visibility, and offsets.\nThis method creates the tooltip element, sets its content, and positions it relative to the target element.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 6683,
                                "end": 6690,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "startMouseTracking",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStop mouse tracking by clearing the interval and removing global event listeners.\nThis method ensures that no multiple intervals are running and cleans up the event listeners.\n",
                    "description": "<p>Stop mouse tracking by clearing the interval and removing global event listeners.\nThis method ensures that no multiple intervals are running and cleans up the event listeners.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 8248,
                                "end": 8254,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "return"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "stopMouseTracking",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 331,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStop mouse tracking by clearing the interval and removing global event listeners.\nThis method ensures that no multiple intervals are running and cleans up the event listeners.\n",
                    "description": "<p>Stop mouse tracking by clearing the interval and removing global event listeners.\nThis method ensures that no multiple intervals are running and cleans up the event listeners.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 9417,
                                "end": 9424,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tooltipService",
                        "type": "JTooltipService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tooltipService",
                        "type": "JTooltipService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4da97038812bb3b3b2f8916940fe044bd63f7b2af45509b2b74e3189314e38c23cb8565e5200895d46c3e1f856bfe210cbb1c74827a1a589c695a6bbfeec4c9a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'tailjng-test'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { JButtonComponent } from './tailjng/button/button.component';\nimport { JThemeGeneratorComponent } from './tailjng/theme-generator/theme-generator.component';\nimport { JInputComponent } from './tailjng/input/input/input.component';\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet, \n   \n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  title = 'tailjng-test';\n}\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<main>\n  \n\n\n</main>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/components/Button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-9fb29796612368253df78cf2977f8432838d963af296cb28b87cd87e2648f469b06ad4110d5889e620927d2e987e736b648861e300710d1c388fbd43f271ca2a",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './components/Button/button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "JButtonComponent",
            "id": "component-JButtonComponent-4521e33cfd053d90f04c89db3018ea77741bedb330542ca4c97ad2acccfc1a7c179aed39a6c9d879a3f7789dea91e4dc2c0f200fc96bb0d87b833184e48d2f55",
            "file": "src/app/tailjng/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "JButton",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classes",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "iconChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "iconSize",
                    "defaultValue": "15",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "isChangeIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLoadingText",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ngClasses",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText in the button",
                    "description": "<p>Text in the button</p>\n",
                    "line": 52,
                    "type": "string | number",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText size in the button",
                    "description": "<p>Text size in the button</p>\n",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "\"top\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIndicates the tooltip position",
                    "description": "<p>Indicates the tooltip position</p>\n",
                    "line": 49,
                    "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"button\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIndicates the type button",
                    "description": "<p>Indicates the type button</p>\n",
                    "line": 46,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "iconsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JIconsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getActiveVariant",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the active variant based on the provided classes.\nIt checks if the class exists in the `variants` object of `JColorsService\n",
                    "description": "<p>Get the active variant based on the provided classes.\nIt checks if the class exists in the <code>variants</code> object of `JColorsService</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4025,
                                "end": 4032,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The active variant based on the provided classes.</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle click event on the button.\nEmits the clicked event if the button is not disabled and not loading.\n",
                    "description": "<p>Handle click event on the button.\nEmits the clicked event if the button is not disabled and not loading.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4415,
                                "end": 4420,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4409,
                                "end": 4414,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The click event</p>\n"
                        }
                    ]
                },
                {
                    "name": "hasClass",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVerify if a class is present in `classes` or `ngClasses`\nSplit the class string by spaces to check each class individually\n",
                    "description": "<p>Verify if a class is present in <code>classes</code> or <code>ngClasses</code>\nSplit the class string by spaces to check each class individually</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3585,
                                "end": 3594,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "className"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3579,
                                "end": 3584,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Name of the class to check</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3629,
                                "end": 3636,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if the class is present, false otherwise</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                },
                {
                    "name": "JTooltipDirective",
                    "type": "directive"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule, NgClass } from \"@angular/common\"\r\nimport { Component, Input, Output, EventEmitter } from \"@angular/core\"\r\nimport { LucideAngularModule } from \"lucide-angular\"\r\nimport { JIconsService } from \"tailjng\";\r\nimport { JColorsService } from '../color/colors.service';\r\nimport { JTooltipDirective } from \"../tooltip/tooltip.directive\"\r\n\r\n@Component({\r\n  selector: 'JButton',\r\n  imports: [NgClass, LucideAngularModule, JTooltipDirective, CommonModule],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.css'\r\n})\r\nexport class JButtonComponent {\r\n  /** Indicates the type button  */\r\n  @Input() type: \"button\" | \"submit\" | \"reset\" = \"button\";\r\n\r\n  /** Indicates the tooltip position  */\r\n  @Input() tooltipPosition: \"top\" | \"right\" | \"bottom\" | \"left\" = \"top\";\r\n\r\n  /** Text in the button  */\r\n  @Input() text!: string | number;\r\n\r\n  /** Text size in the button  */\r\n  @Input() tooltip: string = \"\";\r\n\r\n  @Input() icon!: any;\r\n  @Input() iconSize: number = 15;\r\n  @Input() iconChange!: any;\r\n  @Input() isChangeIcon: boolean = false;\r\n\r\n  @Output() clicked = new EventEmitter<Event>();\r\n\r\n  @Input() disabled = false;\r\n  @Input() isLoading = false;\r\n  @Input() isLoadingText = true;\r\n\r\n  @Input() classes: string = \"\";\r\n  @Input() ngClasses: { [key: string]: boolean } = {};\r\n\r\n\r\n  // Define classes based on button type (switch)\r\n  get variantClasses(): string {\r\n    return this.colorsService.variants[this.getActiveVariant()] || \"min-w-[100px] text-black dark:text-white shadow-md\"\r\n  }\r\n\r\n  // Combine base classes with variants\r\n  get computedClasses() {\r\n    return {\r\n      \"flex gap-3 items-center justify-center font-semibold border border-border dark:border-dark-border px-3 py-2 rounded transition duration-300 select-none\": true,\r\n      [this.variantClasses]: true, // Apply variant classes based on switch\r\n      \"cursor-pointer\": !this.disabled && !this.isLoading, // Default cursor when active\r\n      \"cursor-default opacity-50 pointer-events-none\": this.disabled || this.isLoading, // Disabled cursor\r\n      ...this.ngClasses, // Allows using dynamic validations with [ngClass]\r\n    }\r\n  }\r\n\r\n\r\n  constructor(\r\n    public readonly iconsService: JIconsService,\r\n    private readonly colorsService: JColorsService,\r\n  ) { }\r\n\r\n\r\n  /**\r\n   * Verify if a class is present in `classes` or `ngClasses`\r\n   * Split the class string by spaces to check each class individually\r\n   * @param className Name of the class to check\r\n   * @returns True if the class is present, false otherwise\r\n   */\r\n  private hasClass(className: string): boolean {\r\n    const classArray = this.classes.split(\" \")\r\n    return classArray.includes(className) || this.ngClasses[className]\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Get the active variant based on the provided classes.\r\n   * It checks if the class exists in the `variants` object of `JColorsService\r\n   * @returns The active variant based on the provided classes.\r\n   */\r\n  private getActiveVariant(): string {\r\n    const variant = Object.keys(this.colorsService.variants).find((variant) => this.hasClass(variant))\r\n    return variant ?? \"default\"\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Handle click event on the button.\r\n   * Emits the clicked event if the button is not disabled and not loading.\r\n   * @param event The click event\r\n   */\r\n  handleClick(event: Event) {\r\n    if (!this.disabled && !this.isLoading) {\r\n      this.clicked.emit(event)\r\n    }\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./button.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconsService",
                        "type": "JIconsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorsService",
                        "type": "JColorsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "iconsService",
                        "type": "JIconsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorsService",
                        "type": "JColorsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "variantClasses": {
                    "name": "variantClasses",
                    "getSignature": {
                        "name": "variantClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 73
                    }
                },
                "computedClasses": {
                    "name": "computedClasses",
                    "getSignature": {
                        "name": "computedClasses",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                }
            },
            "templateData": "<!--\n===============================================\nComponent and Function Library - tailjNg\n===============================================\nDescription:\n  This library is designed to provide a set of reusable components and optimized functions\n  to facilitate the development of user interfaces and data management in web applications.\n  It includes tools to improve the developer experience and user interaction.\n\nPurpose:\n  - Create modular and customizable components.\n  - Improve front-end development efficiency through reusable tools.\n  - Provide scalable solutions that are easy to integrate with existing applications.\n\nUsage:\n  To access full functionality, simply import the necessary modules and use the\n  components according to your use case. Be sure to review the official documentation for detailed examples \n  on implementation and customization.\n\nAuthors:\n  Armando Josue Velasquez Delgado - Lead Developer\n\nLicense:\n  This project is licensed under the BSD 3-Clause - see the LICENSE file for more details.\n\nVersion: 0.0.35\nCreation Date: 2025-01-04\n===============================================\n-->\n\n<button\r\n  [attr.type]=\"type\"\r\n  [jTooltip]=\"tooltip\"\r\n  [jTooltipPosition]=\"tooltipPosition\"\r\n  [disabled]=\"disabled || isLoading\"\r\n  [ngClass]=\"computedClasses\"\r\n  [class]=\"classes\"\r\n  (click)=\"handleClick($event)\"\r\n>\r\n  <div class=\"flex items-center justify-center gap-2\">\r\n\r\n    @if (isLoading) {\r\n      <div [ngClass]=\"{ 'pt-1 pb-1': icon }\">\r\n        <lucide-icon [name]=\"iconsService.icons.loading\" [size]=\"iconSize || 15\" class=\"animate-spin\" />\r\n      </div>\r\n    }\r\n\r\n    @if (!isLoading && icon) {\r\n      <div class=\"pt-1 pb-1\">\r\n\r\n        @if (!isChangeIcon) {\r\n          <lucide-icon [name]=\"icon\" [size]=\"iconSize\" />\r\n        } @else {\r\n          <lucide-icon [name]=\"iconChange\" [size]=\"iconSize\" />\r\n        }\r\n        \r\n      </div>\r\n    }\r\n\r\n    @if (text && (!isLoading || isLoadingText)) {\r\n      <span>{{ text }}</span>\r\n    }\r\n\r\n    <ng-content></ng-content>\r\n  </div>\r\n</button>"
        },
        {
            "name": "JFormContainerComponent",
            "id": "component-JFormContainerComponent-25c89517df365375ee839506e9dd11ac3d0224e4e47a97ab804f46097dbc0396a3ada498e082e4dd3df2d7c346b467c8ac5b6f6d056736a21fecd96b34429bbd",
            "file": "src/app/tailjng/form/form-container/container-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "JFormContainer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./container-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'JFormContainer',\r\n  imports: [NgClass],\r\n  templateUrl: './container-form.component.html',\r\n  styleUrl: './container-form.component.css'\r\n})\r\nexport class JFormContainerComponent {\r\n\r\n  @Input() columns = 1\r\n  @Input() rows = false\r\n\r\n  getClasses(): string {\r\n    if (this.rows) return \"flex flex-row gap-3 items-center\"\r\n\r\n    const base = \"grid gap-2\"\r\n    const columnClassMap: { [key: number]: string } = {\r\n      1: \"grid-cols-1\",\r\n      2: \"grid-cols-2\",\r\n      3: \"grid-cols-3\",\r\n      4: \"grid-cols-4\",\r\n      5: \"grid-cols-5\",\r\n      6: \"grid-cols-6\",\r\n    }\r\n\r\n    const mainClass = `${base} ${columnClassMap[this.columns] || columnClassMap[1]}`\r\n\r\n    return `${mainClass}`.trim()\r\n  }\r\n\r\n}",
            "styleUrl": "./container-form.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!--\n===============================================\nComponent and Function Library - tailjNg\n===============================================\nDescription:\n  This library is designed to provide a set of reusable components and optimized functions\n  to facilitate the development of user interfaces and data management in web applications.\n  It includes tools to improve the developer experience and user interaction.\n\nPurpose:\n  - Create modular and customizable components.\n  - Improve front-end development efficiency through reusable tools.\n  - Provide scalable solutions that are easy to integrate with existing applications.\n\nUsage:\n  To access full functionality, simply import the necessary modules and use the\n  components according to your use case. Be sure to review the official documentation for detailed examples \n  on implementation and customization.\n\nAuthors:\n  Armando Josue Velasquez Delgado - Lead Developer\n\nLicense:\n  This project is licensed under the BSD 3-Clause - see the LICENSE file for more details.\n\nVersion: 0.0.35\nCreation Date: 2025-01-04\n===============================================\n-->\n\n<div [ngClass]=\"getClasses()\">\r\n    <ng-content></ng-content>\r\n</div>"
        },
        {
            "name": "JInputComponent",
            "id": "component-JInputComponent-2dcc6070ce0be4beea59e6924c86f9161e15ab799ba3ae0b5b3ff41a9929a651cfebdcccba4b8136ae13ac9161044d71e39f4a3d242c233afe51243222535189",
            "file": "src/app/tailjng/input/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": ")"
                }
            ],
            "selector": "JInput",
            "styleUrls": [
                "./input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classes",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "clearButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ngClass",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "\"text\" | \"password\" | \"number\" | \"date\" | \"datetime-local\" | \"email\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "iconsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JIconsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "innerValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "methodsClass": [
                {
                    "name": "clearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears the input value and resets the component state.\nThis method is typically used when a clear button is clicked.\n",
                    "description": "<p>Clears the input value and resets the component state.\nThis method is typically used when a clear button is clicked.</p>\n"
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a value to the component.\n",
                    "description": "<p>Writes a value to the component.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3526,
                                "end": 3531,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3520,
                                "end": 3525,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function to be called when the input value changes.\n",
                    "description": "<p>Registers a callback function to be called when the input value changes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3113,
                                "end": 3115,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 3107,
                                "end": 3112,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The callback function to register.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function to be called when the input is touched.\n",
                    "description": "<p>Registers a callback function to be called when the input is touched.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3342,
                                "end": 3344,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 3336,
                                "end": 3341,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The callback function to register.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a value to the component.\n",
                    "description": "<p>Writes a value to the component.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2872,
                                "end": 2877,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2866,
                                "end": 2871,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The value to write.</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NgClass, CommonModule } from '@angular/common';\r\nimport { LucideAngularModule } from 'lucide-angular';\r\nimport { JIconsService } from 'tailjng';\r\n\r\n@Component({\r\n  selector: 'JInput',\r\n  imports: [FormsModule, ReactiveFormsModule, NgClass, LucideAngularModule, CommonModule],\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => JInputComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class JInputComponent implements ControlValueAccessor {\r\n  \r\n  @Input() type: 'text' | 'password' | 'number' | 'date' | 'datetime-local' | 'email' = 'text';\r\n\r\n  @Input() id?: string;\r\n  @Input() name?: string;\r\n  @Input() placeholder: string = '';\r\n\r\n  @Input() disabled: boolean = false;\r\n  @Input() required: boolean = false;\r\n  @Input() clearButton: boolean = false;\r\n\r\n  @Input() classes: string = '';\r\n  @Input() ngClass: { [key: string]: boolean } = {};\r\n\r\n  innerValue: any = '';\r\n\r\n  get value(): any {\r\n    return this.innerValue;\r\n  }\r\n\r\n  set value(val: any) {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n      this.onChange(val);\r\n    }\r\n  }\r\n\r\n  get combinedNgClass() {\r\n    return {\r\n      ...(this.ngClass || {}),\r\n      'opacity-50': this.disabled\r\n    };\r\n  }\r\n\r\n  // ControlValueAccessor methods\r\n  onChange: any = () => { };\r\n  onTouched: any = () => { };\r\n\r\n  constructor(public readonly iconsService: JIconsService) { }\r\n\r\n  /**\r\n   * Writes a value to the component.\r\n   * @param value - The value to write.\r\n   */\r\n  writeValue(value: any): void {\r\n    if (value !== undefined) {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a callback function to be called when the input value changes.\r\n   * @param fn - The callback function to register.\r\n   */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback function to be called when the input is touched.\r\n   * @param fn - The callback function to register.\r\n   */\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Writes a value to the component.\r\n   * @param event \r\n   */\r\n  onInput(event: Event): void {\r\n    const target = event.target as HTMLInputElement | HTMLTextAreaElement;\r\n    this.value = target.value;\r\n    this.onChange(this.value);\r\n    this.onTouched();\r\n  }\r\n\r\n  /**\r\n   * Clears the input value and resets the component state.\r\n   * This method is typically used when a clear button is clicked.\r\n   */\r\n  clearInput(): void {\r\n    this.value = '';\r\n    this.onChange('');\r\n    this.onTouched();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*\n===============================================\nComponent and Function Library - tailjNg\n===============================================\nDescription:\n  This library is designed to provide a set of reusable components and optimized functions\n  to facilitate the development of user interfaces and data management in web applications.\n  It includes tools to improve the developer experience and user interaction.\n\nPurpose:\n  - Create modular and customizable components.\n  - Improve front-end development efficiency through reusable tools.\n  - Provide scalable solutions that are easy to integrate with existing applications.\n\nUsage:\n  To access full functionality, simply import the necessary modules and use the\n  components according to your use case. Be sure to review the official documentation for detailed examples \n  on implementation and customization.\n\nAuthors:\n  Armando Josue Velasquez Delgado - Lead Developer\n\nLicense:\n  This project is licensed under the BSD 3-Clause - see the LICENSE file for more details.\n\nVersion: 0.0.35\nCreation Date: 2025-01-04\n===============================================\n*/\n\n",
                    "styleUrl": "./input.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconsService",
                        "type": "JIconsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "iconsService",
                        "type": "JIconsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 67
                    }
                },
                "combinedNgClass": {
                    "name": "combinedNgClass",
                    "getSignature": {
                        "name": "combinedNgClass",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                }
            },
            "templateData": "<!--\n===============================================\nComponent and Function Library - tailjNg\n===============================================\nDescription:\n  This library is designed to provide a set of reusable components and optimized functions\n  to facilitate the development of user interfaces and data management in web applications.\n  It includes tools to improve the developer experience and user interaction.\n\nPurpose:\n  - Create modular and customizable components.\n  - Improve front-end development efficiency through reusable tools.\n  - Provide scalable solutions that are easy to integrate with existing applications.\n\nUsage:\n  To access full functionality, simply import the necessary modules and use the\n  components according to your use case. Be sure to review the official documentation for detailed examples \n  on implementation and customization.\n\nAuthors:\n  Armando Josue Velasquez Delgado - Lead Developer\n\nLicense:\n  This project is licensed under the BSD 3-Clause - see the LICENSE file for more details.\n\nVersion: 0.0.35\nCreation Date: 2025-01-04\n===============================================\n-->\n\n<div class=\"relative w-full\">\r\n    <input\r\n        [type]=\"type\"\r\n        [id]=\"id\"\r\n        [name]=\"name ?? ''\"\r\n        [placeholder]=\"placeholder\"\r\n        [value]=\"value\"\r\n        (input)=\"onInput($event)\"\r\n        [required]=\"required\"\r\n        [disabled]=\"disabled\"\r\n        (blur)=\"onTouched()\"\r\n        [ngClass]=\"combinedNgClass\"\r\n        [class]=\"classes\"\r\n        class=\"input w-full h-[40px] bg-background dark:bg-dark-background border border-border dark:border-dark-border text-black dark:text-white rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary transition duration-200\" \r\n    />\r\n\r\n    @if (value && clearButton) {\r\n        <button type=\"button\"\r\n          class=\"absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 text-gray-400 hover:text-gray-500 pr-1 mr-1 text-gray-400 hover:text-gray-600 focus:outline-none cursor-pointer\"\r\n          (click)=\"clearInput()\"\r\n          [disabled]=\"disabled\"\r\n          [ngClass]=\"{\r\n            'cursor-not-allowed opacity-50': disabled\r\n          }\"\r\n        >\r\n            <lucide-icon [name]=\"iconsService.icons.close\" class=\"w-4 h-4\" />\r\n        </button>\r\n    }\r\n</div>"
        },
        {
            "name": "JLabelComponent",
            "id": "component-JLabelComponent-5074641d5adc35c4085989e14710fb5e209e5b7ec647e2b1f2ac77b2e8f8e0ac534fa0cf4b82c05778f2d622a813ee476b4ed7f215af030fb7a530fbae3496ee",
            "file": "src/app/tailjng/label/label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "JLabel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classes",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "for",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nId for the input",
                    "description": "<p>Id for the input</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isAutomated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isConditioned",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ngClass",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "iconsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JIconsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "JTooltipDirective",
                    "type": "directive"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { JTooltipDirective } from '../tooltip/tooltip.directive';\nimport { JIconsService } from 'tailjng';\nimport { LucideAngularModule } from 'lucide-angular';\n\n@Component({\n  selector: 'JLabel',\n  imports: [NgClass, JTooltipDirective, LucideAngularModule],\n  templateUrl: './label.component.html',\n  styleUrl: './label.component.css'\n})\nexport class JLabelComponent {\n\n  constructor(public iconsService: JIconsService) { }\n\n  @Input() tooltipPosition: 'top' | 'right' | 'bottom' | 'left' = 'top';\n  @Input() tooltip: string = '';\n  /** Id for the input */\n  @Input() for: string = '';\n  \n  @Input() classes: string = '';\n  @Input() ngClass: { [key: string]: boolean } = {};\n  \n  @Input() isRequired: boolean = false;\n  @Input() isConditioned: boolean = false;\n  @Input() isAutomated: boolean = false;\n}\n",
            "styleUrl": "./label.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconsService",
                        "type": "JIconsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "iconsService",
                        "type": "JIconsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!--\n===============================================\nComponent and Function Library - tailjNg\n===============================================\nDescription:\n  This library is designed to provide a set of reusable components and optimized functions\n  to facilitate the development of user interfaces and data management in web applications.\n  It includes tools to improve the developer experience and user interaction.\n\nPurpose:\n  - Create modular and customizable components.\n  - Improve front-end development efficiency through reusable tools.\n  - Provide scalable solutions that are easy to integrate with existing applications.\n\nUsage:\n  To access full functionality, simply import the necessary modules and use the\n  components according to your use case. Be sure to review the official documentation for detailed examples \n  on implementation and customization.\n\nAuthors:\n  Armando Josue Velasquez Delgado - Lead Developer\n\nLicense:\n  This project is licensed under the BSD 3-Clause - see the LICENSE file for more details.\n\nVersion: 0.0.35\nCreation Date: 2025-01-04\n===============================================\n-->\n\n<label \r\n  [for]=\"for\"\r\n  [ngClass]=\"ngClass\"\r\n  [class]=\"classes\"\r\n  class=\"flex gap-1 items-center text-black dark:text-white\"\r\n>\r\n  <ng-content></ng-content>\r\n\r\n  @if (isRequired || isConditioned || isAutomated) {\r\n    <div class=\"text-[8px]\">\r\n      <span [ngClass]=\"{\r\n          'text-red-600 dark:text-red-300': isRequired,\r\n          'text-blue-600 dark:text-blue-300': !isRequired && isConditioned,\r\n          'text-purple-600 dark:text-purple-300': !isRequired && !isConditioned && isAutomated\r\n      }\">✱</span>\r\n    </div>\r\n  }\r\n\r\n  @if (tooltip) {\r\n    <span [jTooltip]=\"tooltip\" [jTooltipPosition]=\"tooltipPosition\" >\r\n      <lucide-icon [name]=\"iconsService.icons.info\" [size]=\"15\" />\r\n    </span>\r\n  }\r\n\r\n</label>"
        },
        {
            "name": "JRangeInputComponent",
            "id": "component-JRangeInputComponent-6365d7d6fc59e83a1783db64fd8e8a4906ad804d9f2fc58442caa341c95e1f333094c3e1e2474ff59c80790599db42118322cd09881bd74d5086608ea84d225e",
            "file": "src/app/tailjng/input/input-range/range-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": ")"
                }
            ],
            "selector": "JRangeInput",
            "styleUrls": [
                "./range-input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./range-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classes",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ngClass",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "simbol",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "innerValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "methodsClass": [
                {
                    "name": "clearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears the input\n",
                    "description": "<p>Clears the input</p>\n"
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles input changes.\n",
                    "description": "<p>Handles input changes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3329,
                                "end": 3334,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3323,
                                "end": 3328,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The input event.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a function to call when the value changes.\n",
                    "description": "<p>Registers a function to call when the value changes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2933,
                                "end": 2935,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2927,
                                "end": 2932,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The function to call when the value changes.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a function to call when the control is touched.\n",
                    "description": "<p>Registers a function to call when the control is touched.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3145,
                                "end": 3147,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3139,
                                "end": 3144,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The function to call when the control is touched.</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LucideAngularModule } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'JRangeInput',\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, LucideAngularModule],\r\n  templateUrl: './range-input.component.html',\r\n  styleUrls: ['./range-input.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => JRangeInputComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class JRangeInputComponent implements ControlValueAccessor {\r\n\r\n  @Input() id?: string;\r\n  @Input() name?: string;\r\n  @Input() placeholder: string = '';\r\n  @Input() disabled: boolean = false;\r\n  @Input() required: boolean = false;\r\n  @Input() classes: string = '';\r\n  @Input() ngClass: { [key: string]: boolean } = {};\r\n\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() step: number = 1;\r\n  @Input() isLabel: boolean = false;\r\n  @Input() simbol: string = '';\r\n\r\n  innerValue: any = '';\r\n\r\n  get value(): any {\r\n    return this.innerValue;\r\n  }\r\n\r\n  set value(val: any) {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n      this.onChange(val);\r\n    }\r\n  }\r\n\r\n  get combinedNgClass() {\r\n    return {\r\n      ...(this.ngClass || {}),\r\n      'opacity-50': this.disabled\r\n    };\r\n  }\r\n\r\n  // ControlValueAccessor methods\r\n  onChange: any = () => { };\r\n  onTouched: any = () => { };\r\n\r\n  // Writes a value to the component\r\n  writeValue(value: any): void {\r\n    if (value !== undefined) {\r\n      this.innerValue = value;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Registers a function to call when the value changes.\r\n   * @param fn The function to call when the value changes.\r\n   */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Registers a function to call when the control is touched.\r\n   * @param fn The function to call when the control is touched.\r\n   */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Handles input changes.\r\n   * @param event The input event.\r\n   */\r\n  onInput(event: Event): void {\r\n    const target = event.target as HTMLInputElement;\r\n    this.value = target.value;\r\n    this.onChange(this.value);\r\n    this.onTouched();\r\n  }\r\n\r\n\r\n  \r\n  /**\r\n   * Clears the input\r\n   */\r\n  clearInput(): void {\r\n    this.value = '';\r\n    this.onChange('');\r\n    this.onTouched();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*\n===============================================\nComponent and Function Library - tailjNg\n===============================================\nDescription:\n  This library is designed to provide a set of reusable components and optimized functions\n  to facilitate the development of user interfaces and data management in web applications.\n  It includes tools to improve the developer experience and user interaction.\n\nPurpose:\n  - Create modular and customizable components.\n  - Improve front-end development efficiency through reusable tools.\n  - Provide scalable solutions that are easy to integrate with existing applications.\n\nUsage:\n  To access full functionality, simply import the necessary modules and use the\n  components according to your use case. Be sure to review the official documentation for detailed examples \n  on implementation and customization.\n\nAuthors:\n  Armando Josue Velasquez Delgado - Lead Developer\n\nLicense:\n  This project is licensed under the BSD 3-Clause - see the LICENSE file for more details.\n\nVersion: 0.0.35\nCreation Date: 2025-01-04\n===============================================\n*/\n\n",
                    "styleUrl": "./range-input.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 67
                    }
                },
                "combinedNgClass": {
                    "name": "combinedNgClass",
                    "getSignature": {
                        "name": "combinedNgClass",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                }
            },
            "templateData": "<!--\n===============================================\nComponent and Function Library - tailjNg\n===============================================\nDescription:\n  This library is designed to provide a set of reusable components and optimized functions\n  to facilitate the development of user interfaces and data management in web applications.\n  It includes tools to improve the developer experience and user interaction.\n\nPurpose:\n  - Create modular and customizable components.\n  - Improve front-end development efficiency through reusable tools.\n  - Provide scalable solutions that are easy to integrate with existing applications.\n\nUsage:\n  To access full functionality, simply import the necessary modules and use the\n  components according to your use case. Be sure to review the official documentation for detailed examples \n  on implementation and customization.\n\nAuthors:\n  Armando Josue Velasquez Delgado - Lead Developer\n\nLicense:\n  This project is licensed under the BSD 3-Clause - see the LICENSE file for more details.\n\nVersion: 0.0.35\nCreation Date: 2025-01-04\n===============================================\n-->\n\n<div class=\"w-full\">\r\n    @if (placeholder) {\r\n        @if (isLabel) {\r\n            \r\n        <label [for]=\"id\" class=\"flex text-[15px] font-bold text-black dark:text-white justify-between mb-1 opacity-80\">\r\n            <span>{{ placeholder }}</span>\r\n            <span>{{ value | number:'1.0-2' }}{{simbol}}</span>\r\n        </label>\r\n\r\n        } @else {\r\n            <label [for]=\"id\" class=\"block text-[15px] font-bold text-black dark:text-white text-center mb-1 opacity-80\">{{ placeholder }}</label>\r\n        }\r\n    }\r\n\r\n    <div class=\"relative flex gap-2 w-full items-center justify-center align-center items-center justify-center align-center\">\r\n        @if (min !== null) {\r\n            <span class=\"text-[15px] font-bold text-gray-500 mt-1 text-center\">{{min}}{{simbol}}</span>\r\n        }\r\n        <input\r\n            type=\"range\"\r\n            [id]=\"id\"\r\n            [name]=\"name ?? ''\"\r\n            [min]=\"min\"\r\n            [max]=\"max\"\r\n            [step]=\"step\"\r\n            [required]=\"required\"\r\n            [disabled]=\"disabled\"\r\n            [(ngModel)]=\"value\"\r\n            (blur)=\"onTouched()\"\r\n            [ngClass]=\"combinedNgClass\"\r\n            [class]=\"classes\"\r\n            class=\"\r\n                w-full h-5 bg-background dark:bg-dark-background border border-border dark:border-dark-border \r\n                rounded-lg appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary transition duration-200\r\n                \r\n                [&::-webkit-slider-thumb]:appearance-none\r\n                [&::-webkit-slider-thumb]:h-8\r\n                [&::-webkit-slider-thumb]:w-8\r\n                [&::-webkit-slider-thumb]:rounded-full\r\n                [&::-webkit-slider-thumb]:cursor-pointer\r\n                [&::-webkit-slider-thumb]:bg-dark-primary\r\n                dark:[&::-webkit-slider-thumb]:bg-primary\r\n                [&::-webkit-slider-thumb:hover]:bg-primary\r\n                dark:[&::-webkit-slider-thumb:hover]:bg-dark-primary\r\n                \r\n                [&::-moz-range-thumb]:h-4\r\n                [&::-moz-range-thumb]:w-4\r\n                [&::-moz-range-thumb]:rounded-full\r\n                [&::-moz-range-thumb]:bg-primary\r\n                [&::-moz-range-thumb]:cursor-pointer\r\n                [&::-moz-range-thumb:hover]:bg-primary\r\n                dark:[&::-moz-range-thumb:hover]:bg-dark-primary\r\n            \" \r\n        />\r\n\r\n        @if (max) {\r\n            <span class=\"text-[15px] font-bold text-gray-500 mt-1 text-center\">{{max}}{{simbol}}</span>\r\n        }\r\n    </div>\r\n\r\n    @if (!isLabel) {\r\n        <div class=\"text-xl font-bold text-gray-500 mt-1 text-center\">{{ value }}</div>\r\n    }\r\n</div>"
        },
        {
            "name": "JThemeGeneratorComponent",
            "id": "component-JThemeGeneratorComponent-eefafa791923f69349a7722d7d47db14852643e3f0299d6628990ef4775b167c06e5c059649aa37c8ac5004015184eb00a784eedcdd982f713c4900a9afc29a1",
            "file": "src/app/tailjng/theme-generator/theme-generator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "JThemeGenerator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./theme-generator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseColor",
                    "defaultValue": "'#415884'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "colorPickerPosition",
                    "defaultValue": "{ x: 50, y: 50 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorPosition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "copied",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "generatedColors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GeneratedColors",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "huePosition",
                    "defaultValue": "219",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "iconsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JIconsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "isPickingColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "lastTheme",
                    "defaultValue": "this.previewMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemeMode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lightness",
                    "defaultValue": "38.63",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "previewMode",
                    "defaultValue": "localStorage.getItem('theme') as ThemeMode || 'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemeMode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "saturation",
                    "defaultValue": "34.01",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "themeCode",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "themeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JThemeService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "copyThemeToClipboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate the theme colors.\n",
                    "description": "<p>Generate the theme colors.</p>\n"
                },
                {
                    "name": "getCurrentTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current theme mode.\n",
                    "description": "<p>Get the current theme mode.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3429,
                                "end": 3436,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The current theme mode.</p>\n"
                        }
                    ]
                },
                {
                    "name": "hexToHSL",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert a hex color string to HSL.\n",
                    "description": "<p>Convert a hex color string to HSL.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6100,
                                "end": 6103,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "hex"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6094,
                                "end": 6099,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The hex color string.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 6133,
                                "end": 6140,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The HSL representation of the color.</p>\n"
                        }
                    ]
                },
                {
                    "name": "hslToHex",
                    "args": [
                        {
                            "name": "h",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "s",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "l",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert HSL values to a hex color string.\n",
                    "description": "<p>Convert HSL values to a hex color string.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7058,
                                "end": 7059,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "h"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7052,
                                "end": 7057,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The hue value.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7088,
                                "end": 7089,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "s"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7082,
                                "end": 7087,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The saturation value.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7125,
                                "end": 7126,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "l"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7119,
                                "end": 7124,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The lightness value.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 7155,
                                "end": 7162,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The hex color string.</p>\n"
                        }
                    ]
                },
                {
                    "name": "mixHsl",
                    "args": [
                        {
                            "name": "h1",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "s1",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "l1",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "h2",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "s2",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "l2",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ratio",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 362,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "h1",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "s1",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "l1",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "h2",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "s2",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "l2",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ratio",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPreviewMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "ThemeMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the preview mode for the theme generator.\n",
                    "description": "<p>Set the preview mode for the theme generator.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3768,
                                "end": 3772,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "mode"
                            },
                            "type": "ThemeMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3762,
                                "end": 3767,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The theme mode to set.</p>\n"
                        }
                    ]
                },
                {
                    "name": "startColorPicking",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStart color picking.\n",
                    "description": "<p>Start color picking.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3934,
                                "end": 3939,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3928,
                                "end": 3933,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mouse event.</p>\n"
                        }
                    ]
                },
                {
                    "name": "stopColorPicking",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStop color picking.\n",
                    "description": "<p>Stop color picking.</p>\n"
                },
                {
                    "name": "syncFromHSL",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSync the internal state from HSL values.\n",
                    "description": "<p>Sync the internal state from HSL values.</p>\n"
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle the theme mode between light and dark.\n",
                    "description": "<p>Toggle the theme mode between light and dark.</p>\n"
                },
                {
                    "name": "updateColorFromPosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the color from the mouse position.\n",
                    "description": "<p>Update the color from the mouse position.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4512,
                                "end": 4517,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4506,
                                "end": 4511,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mouse event.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateColorPicking",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the color picking state.\n",
                    "description": "<p>Update the color picking state.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4156,
                                "end": 4161,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4150,
                                "end": 4155,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mouse event.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateFromHexInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the color from the hex input.\n",
                    "description": "<p>Update the color from the hex input.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 5365,
                                "end": 5372,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateHueFromInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the hue position from the input event.\n",
                    "description": "<p>Update the hue position from the input event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5098,
                                "end": 5103,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5092,
                                "end": 5097,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The input event.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                },
                {
                    "name": "JInputComponent",
                    "type": "component"
                },
                {
                    "name": "JRangeInputComponent",
                    "type": "component"
                },
                {
                    "name": "JButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "JLabelComponent",
                    "type": "component"
                },
                {
                    "name": "JFormContainerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { LucideAngularModule } from 'lucide-angular';\r\nimport { JInputComponent } from '../input/input/input.component';\r\nimport { JRangeInputComponent } from '../input/input-range/range-input.component';\r\nimport { JButtonComponent } from '../button/button.component';\r\nimport { JLabelComponent } from '../label/label.component';\r\nimport { ColorPosition, GeneratedColors, JIconsService, JThemeService, ThemeMode } from 'tailjng';\r\nimport { JFormContainerComponent } from '../form/form-container/container-form.component';\r\n\r\n@Component({\r\n  selector: 'JThemeGenerator',\r\n  imports: [LucideAngularModule, JInputComponent, JRangeInputComponent, JButtonComponent, FormsModule, JLabelComponent, JFormContainerComponent],\r\n  templateUrl: './theme-generator.component.html',\r\n  styleUrl: './theme-generator.component.css'\r\n})\r\nexport class JThemeGeneratorComponent {\r\n\r\n  // Color picker state\r\n  baseColor: string = '#415884';\r\n  saturation: number = 34.01;\r\n  lightness: number = 38.63;\r\n  huePosition: number = 219;\r\n  colorPickerPosition: ColorPosition = { x: 50, y: 50 };\r\n\r\n\r\n  // Sync preview with signal\r\n  previewMode: ThemeMode = localStorage.getItem('theme') as ThemeMode || 'light';\r\n  private lastTheme: ThemeMode = this.previewMode;\r\n\r\n  isPickingColor = false;\r\n  copied = false;\r\n\r\n  themeCode: string = '';\r\n  generatedColors!: GeneratedColors;\r\n\r\n\r\n  // Color picker gradient\r\n  get hueGradient(): string {\r\n    return `linear-gradient(to right, \r\n      hsl(0, 100%, 50%),\r\n      hsl(60, 100%, 50%),\r\n      hsl(120, 100%, 50%),\r\n      hsl(180, 100%, 50%),\r\n      hsl(240, 100%, 50%),\r\n      hsl(300, 100%, 50%),\r\n      hsl(360, 100%, 50%))`;\r\n  }\r\n\r\n  constructor(\r\n    public readonly iconsService: JIconsService,\r\n    public readonly themeService: JThemeService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.syncFromHSL();\r\n\r\n    // Asynchronously check for theme changes every 300ms\r\n    setInterval(() => {\r\n      const current = localStorage.getItem('theme') as ThemeMode;\r\n      if (current && current !== this.lastTheme) {\r\n        this.previewMode = current;\r\n        this.lastTheme = current;\r\n        this.generateTheme();\r\n      }\r\n    }, 300);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Get the current theme mode.\r\n   * @returns The current theme mode.\r\n   */\r\n  getCurrentTheme(): string {\r\n    return this.themeService.getThemeMode();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Toggle the theme mode between light and dark.\r\n   */\r\n  toggleTheme(): void {\r\n    this.themeService.toggleTheme();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Set the preview mode for the theme generator.\r\n   * @param mode The theme mode to set.\r\n   */\r\n  setPreviewMode(mode: ThemeMode): void {\r\n    this.previewMode = mode;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Start color picking.\r\n   * @param event The mouse event.\r\n   */\r\n  startColorPicking(event: MouseEvent): void {\r\n    this.isPickingColor = true;\r\n    this.updateColorFromPosition(event);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Update the color picking state.\r\n   * @param event The mouse event.\r\n   */\r\n  updateColorPicking(event: MouseEvent): void {\r\n    if (this.isPickingColor) {\r\n      this.updateColorFromPosition(event);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Stop color picking.\r\n   */\r\n  stopColorPicking(): void {\r\n    this.isPickingColor = false;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Update the color from the mouse position.\r\n   * @param event The mouse event.\r\n   */\r\n  updateColorFromPosition(event: MouseEvent): void {\r\n    const target = event.target as HTMLElement;\r\n    const rect = target.getBoundingClientRect();\r\n    const x = Math.max(0, Math.min(1, (event.clientX - rect.left) / rect.width));\r\n    const y = Math.max(0, Math.min(1, (event.clientY - rect.top) / rect.height));\r\n    this.colorPickerPosition = { x: x * 100, y: y * 100 };\r\n    this.saturation = x * 100;\r\n    this.lightness = (1 - y) * 100;\r\n    this.syncFromHSL();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Update the hue position from the input event.\r\n   * @param event The input event.\r\n   */\r\n  updateHueFromInput(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    this.huePosition = parseInt(input.value);\r\n    this.syncFromHSL();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Update the color from the hex input.\r\n   * @returns \r\n   */\r\n  updateFromHexInput(): void {\r\n    if (!this.baseColor.startsWith('#')) this.baseColor = '#' + this.baseColor;\r\n    const hexRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\r\n    if (!hexRegex.test(this.baseColor)) return;\r\n    const { h, s, l } = this.hexToHSL(this.baseColor);\r\n    this.huePosition = h;\r\n    this.saturation = s;\r\n    this.lightness = l;\r\n    this.colorPickerPosition = { x: s, y: 100 - l };\r\n    this.syncFromHSL();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Sync the internal state from HSL values.\r\n   */\r\n  syncFromHSL(): void {\r\n    this.baseColor = this.hslToHex(this.huePosition, this.saturation, this.lightness);\r\n    this.generateTheme();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Convert a hex color string to HSL.\r\n   * @param hex The hex color string.\r\n   * @returns The HSL representation of the color.\r\n   */\r\n  hexToHSL(hex: string): { h: number; s: number; l: number } {\r\n    hex = hex.replace(/^#/, '');\r\n    if (hex.length === 3) hex = hex.split('').map(c => c + c).join('');\r\n    const r = parseInt(hex.slice(0, 2), 16) / 255;\r\n    const g = parseInt(hex.slice(2, 4), 16) / 255;\r\n    const b = parseInt(hex.slice(4, 6), 16) / 255;\r\n    const max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n    let h = 0, s = 0, l = (max + min) / 2;\r\n\r\n    if (max !== min) {\r\n      const d = max - min;\r\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n      switch (max) {\r\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n        case g: h = (b - r) / d + 2; break;\r\n        case b: h = (r - g) / d + 4; break;\r\n      }\r\n      h *= 60;\r\n    }\r\n\r\n    return { h, s: s * 100, l: l * 100 };\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Convert HSL values to a hex color string.\r\n   * @param h The hue value.\r\n   * @param s The saturation value.\r\n   * @param l The lightness value.\r\n   * @returns The hex color string.\r\n   */\r\n  hslToHex(h: number, s: number, l: number): string {\r\n    h %= 360;\r\n    s /= 100;\r\n    l /= 100;\r\n    const c = (1 - Math.abs(2 * l - 1)) * s;\r\n    const x = c * (1 - Math.abs((h / 60) % 2 - 1));\r\n    const m = l - c / 2;\r\n    let r = 0, g = 0, b = 0;\r\n\r\n    if (h < 60) [r, g, b] = [c, x, 0];\r\n    else if (h < 120) [r, g, b] = [x, c, 0];\r\n    else if (h < 180) [r, g, b] = [0, c, x];\r\n    else if (h < 240) [r, g, b] = [0, x, c];\r\n    else if (h < 300) [r, g, b] = [x, 0, c];\r\n    else[r, g, b] = [c, 0, x];\r\n\r\n    r = Math.round((r + m) * 255);\r\n    g = Math.round((g + m) * 255);\r\n    b = Math.round((b + m) * 255);\r\n\r\n    return `#${[r, g, b].map(v => v.toString(16).padStart(2, '0')).join('')}`;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Generate the theme colors.\r\n   */\r\n  generateTheme(): void {\r\n    this.baseColor = this.hslToHex(this.huePosition, this.saturation * 0.9, this.lightness);\r\n\r\n    const vars = this.generatedColors = {\r\n      background: this.hslToHex(this.huePosition, this.saturation, 95),\r\n      foreground: this.hslToHex(210, 6, 10),\r\n      card: this.hslToHex(this.huePosition, this.saturation * 0.3, 90),\r\n      cardForeground: this.hslToHex(this.huePosition, this.saturation * 0.8, 15),\r\n      popover: this.hslToHex(this.huePosition, this.saturation * 0.2, 95),\r\n      popoverForeground: this.hslToHex(this.huePosition, this.saturation, 7),\r\n      primary: this.baseColor,\r\n      primaryForeground: '#FFFFFF',\r\n      secondary: this.hslToHex(this.huePosition, this.saturation * 0.4, 75),\r\n      secondaryForeground: '#000000',\r\n      muted: this.hslToHex(this.huePosition, this.saturation * 0.1, 85),\r\n      mutedForeground: this.hslToHex(this.huePosition, this.saturation * 0.5, 40),\r\n      accent: this.hslToHex(this.huePosition, this.saturation * 0.1, 82),\r\n      accentForeground: this.hslToHex(this.huePosition, this.saturation * 0.8, 15),\r\n      destructive: '#BF3F3F',\r\n      destructiveForeground: this.hslToHex(this.huePosition, this.saturation * 0.2, 95),\r\n      border: this.hslToHex(this.huePosition, this.saturation * 0.5, 60),\r\n      input: this.hslToHex(this.huePosition, this.saturation * 0.5, 60),\r\n      ring: this.baseColor,\r\n\r\n      darkBackground: this.mixHsl(\r\n        this.huePosition, this.saturation * 0.7, 8,\r\n        210, 6, 10,\r\n        0.6\r\n      ),\r\n\r\n      darkForeground: this.hslToHex(this.huePosition, this.saturation * 0.2, 90),\r\n      darkCard: this.hslToHex(this.huePosition, this.saturation * 0.8, 8),\r\n      darkCardForeground: this.hslToHex(this.huePosition, this.saturation * 0.2, 90),\r\n      darkPopover: this.hslToHex(this.huePosition, this.saturation * 0.8, 3),\r\n      darkPopoverForeground: this.hslToHex(this.huePosition, this.saturation * 0.2, 90),\r\n      darkPrimary: this.hslToHex(this.huePosition, this.saturation * 0.7, 28),\r\n      darkPrimaryForeground: '#FFFFFF',\r\n      darkSecondary: this.hslToHex(this.huePosition, this.saturation * 0.6, 20),\r\n      darkSecondaryForeground: '#FFFFFF',\r\n      darkMuted: this.hslToHex(this.huePosition, this.saturation * 0.3, 25),\r\n      darkMutedForeground: this.hslToHex(this.huePosition, this.saturation * 0.2, 60),\r\n      darkAccent: this.hslToHex(this.huePosition, this.saturation * 0.3, 25),\r\n      darkAccentForeground: this.hslToHex(this.huePosition, this.saturation * 0.2, 90),\r\n      darkDestructive: '#BF3F3F',\r\n      darkDestructiveForeground: this.hslToHex(this.huePosition, this.saturation * 0.2, 90),\r\n      darkBorder: this.hslToHex(this.huePosition, this.saturation * 0.5, 45),\r\n      darkInput: this.hslToHex(this.huePosition, this.saturation * 0.5, 45),\r\n      darkRing: this.hslToHex(this.huePosition, this.saturation * 0.7, 28),\r\n    };\r\n\r\n    const toCssVar = (key: string, value: string) =>\r\n      `  --color-${key.replace(/[A-Z]/g, m => '-' + m.toLowerCase())}: ${value};`;\r\n\r\n    const keys = Object.keys(vars) as (keyof GeneratedColors)[];\r\n    const lines: string[] = [];\r\n\r\n    let darkStarted = false;\r\n    for (const key of keys) {\r\n      if (!darkStarted && key.startsWith('dark')) {\r\n        lines.push('');\r\n        darkStarted = true;\r\n      }\r\n      lines.push(toCssVar(key, vars[key]));\r\n    }\r\n\r\n    lines.push(`  --color-radius: 0.5rem;`);\r\n    lines.push(`  --color-dark-radius: 0.5rem;`);\r\n\r\n    this.themeCode = `@theme {\\n${lines.join('\\n')}\\n}`;\r\n  }\r\n\r\n\r\n  copyThemeToClipboard(): void {\r\n    navigator.clipboard.writeText(this.themeCode);\r\n    this.copied = true;\r\n    setTimeout(() => (this.copied = false), 2000);\r\n  }\r\n\r\n  mixHsl(h1: number, s1: number, l1: number, h2: number, s2: number, l2: number, ratio: number): string {\r\n    const h = h1 * (1 - ratio) + h2 * ratio;\r\n    const s = s1 * (1 - ratio) + s2 * ratio;\r\n    const l = l1 * (1 - ratio) + l2 * ratio;\r\n    return this.hslToHex(h, s, l);\r\n  }\r\n  \r\n}\r\n",
            "styleUrl": "./theme-generator.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconsService",
                        "type": "JIconsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "themeService",
                        "type": "JThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "iconsService",
                        "type": "JIconsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "JThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "hueGradient": {
                    "name": "hueGradient",
                    "getSignature": {
                        "name": "hueGradient",
                        "type": "string",
                        "returnType": "string",
                        "line": 69
                    }
                }
            },
            "templateData": "<!--\n===============================================\nComponent and Function Library - tailjNg\n===============================================\nDescription:\n  This library is designed to provide a set of reusable components and optimized functions\n  to facilitate the development of user interfaces and data management in web applications.\n  It includes tools to improve the developer experience and user interaction.\n\nPurpose:\n  - Create modular and customizable components.\n  - Improve front-end development efficiency through reusable tools.\n  - Provide scalable solutions that are easy to integrate with existing applications.\n\nUsage:\n  To access full functionality, simply import the necessary modules and use the\n  components according to your use case. Be sure to review the official documentation for detailed examples \n  on implementation and customization.\n\nAuthors:\n  Armando Josue Velasquez Delgado - Lead Developer\n\nLicense:\n  This project is licensed under the BSD 3-Clause - see the LICENSE file for more details.\n\nVersion: 0.0.35\nCreation Date: 2025-01-04\n===============================================\n-->\n\n<main class=\"container mx-auto\">\r\n    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n\r\n        <!-- Controls Panel -->\r\n        <div class=\"space-y-8 select-none\">\r\n\r\n            <div>\r\n                <h2 class=\"text-sm font-bold mb-1 opacity-60\">Selector de color</h2>\r\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    \r\n                    <!-- Color Picker -->\r\n                    <div class=\"relative h-64 w-full overflow-hidden rounded-lg border border-border dark:border-dark-border\">\r\n                        <div class=\"absolute inset-0 bg-gradient-to-br from-white to-transparent\" style=\"z-index: 1;\"></div>\r\n                        <div class=\"absolute inset-0 bg-gradient-to-b from-transparent to-black\" style=\"z-index: 2;\"></div>\r\n                        <div class=\"absolute inset-0\" [style.background]=\"'linear-gradient(to right, hsl(' + huePosition + ', 0%, 50%), hsl(' + huePosition + ', 100%, 50%))'\" style=\"z-index: 0;\"></div>\r\n                        <div class=\"absolute w-6 h-6 rounded-full border-2 border-white transform -translate-x-1/2 -translate-y-1/2 cursor-pointer\" [style.left.%]=\"colorPickerPosition.x\" [style.top.%]=\"colorPickerPosition.y\" style=\"z-index: 3;\"></div>\r\n                        <div class=\"absolute inset-0 cursor-pointer\" (mousedown)=\"startColorPicking($event)\" (mousemove)=\"updateColorPicking($event)\" (mouseup)=\"stopColorPicking()\" (mouseleave)=\"stopColorPicking()\" style=\"z-index: 4;\"></div>\r\n                    </div>\r\n\r\n                    <!-- Color Spectrum -->\r\n                    <div class=\"space-y-4\">\r\n                        <div class=\"relative\">\r\n\r\n                            <!-- Picker bar -->\r\n                            <div class=\"h-8 w-full rounded-lg overflow-hidden border border-border dark:border-dark-border relative\">\r\n                                <div class=\"absolute inset-0\" [style.background]=\"hueGradient\"></div>\r\n                                \r\n                                <input \r\n                                    type=\"range\" \r\n                                    min=\"0\" \r\n                                    max=\"360\" \r\n                                    [value]=\"huePosition\"\r\n                                    (input)=\"updateHueFromInput($event)\"\r\n                                    class=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\" \r\n                                />\r\n                            </div>\r\n                          \r\n                             <!-- Ball outside the flow to stand out -->\r\n                            <div class=\"absolute top-1/2 transform -translate-y-1/2 -translate-x-1/2 w-9 h-9 rounded-full border-2 border-white z-10 pointer-events-none\"\r\n                                 [style.left.%]=\"(huePosition / 360) * 100\"\r\n                                 [style.backgroundColor]=\"hslToHex(huePosition, 100, 50)\">\r\n                            </div>\r\n                          \r\n                        </div>\r\n                        \r\n\r\n                        <!-- Hex Input -->\r\n                        <JFormContainer>\r\n                            <JFormContainer>\r\n                                <JLabel for=\"baseColor\" classes=\"opacity-60\">Ingresa un valor Hex</JLabel>\r\n\r\n                                <JFormContainer [rows]=\"true\">\r\n\r\n                                    <JFormContainer class=\"flex-1\">\r\n                                        <JInput \r\n                                            id=\"baseColor\" \r\n                                            type=\"text\" \r\n                                            [(ngModel)]=\"baseColor\"\r\n                                            (input)=\"updateFromHexInput()\" \r\n                                            placeholder=\"#000000\" \r\n                                        />\r\n                                    </JFormContainer>\r\n\r\n                                    <!-- Color Preview -->\r\n                                    <div class=\"h-[35px] w-[60px] rounded shadow-md\" [style.background-color]=\"baseColor\"></div>\r\n\r\n                                </JFormContainer>\r\n                            </JFormContainer>\r\n\r\n                            <!-- Saturation Slider -->\r\n                            <JRangeInput \r\n                                [min]=\"0\" \r\n                                [max]=\"100\" \r\n                                [(ngModel)]=\"saturation\"\r\n                                (input)=\"generateTheme()\" \r\n                                placeholder=\"Saturación\" \r\n                                [isLabel]=\"true\" \r\n                                simbol=\"%\" \r\n                            />\r\n\r\n                            <!-- Lightness Slider -->\r\n                            <JRangeInput \r\n                                [min]=\"0\" \r\n                                [max]=\"100\" \r\n                                [(ngModel)]=\"lightness\" \r\n                                (input)=\"generateTheme()\"\r\n                                placeholder=\"Luminosidad\" \r\n                                [isLabel]=\"true\" \r\n                                simbol=\"%\" \r\n                            />\r\n\r\n                        </JFormContainer>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Code Preview -->\r\n        <div class=\"relative\">\r\n            <div\r\n                class=\"h-70 bg-background dark:bg-dark-background text-black dark:text-white overflow-auto rounded-lg font-mono text-sm whitespace-pre-wrap border border-border dark:border-dark-border scroll-element\">\r\n                <div class=\"p-4\">\r\n                    <span>{{ themeCode }}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"absolute top-4 right-4\">\r\n                <JButton \r\n                    (clicked)=\"copyThemeToClipboard()\" \r\n                    [icon]=\"iconsService.icons.copy\" \r\n                    [iconChange]=\"iconsService.icons.check\"\r\n                    [isChangeIcon]=\"copied\" \r\n                    [iconSize]=\"15\" \r\n                    tooltip=\"Copiar\" \r\n                    classes=\"w-[25px] h-[25px]\" \r\n                />\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</main>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/button.st.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/button.st.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Example/btn',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\n  args: { onClick: fn() }\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/button.st.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Routes",
                "defaultValue": "[]"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/button.st.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/button.st.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/stories/components/Button/button.st.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
                }
            ],
            "src/stories/components/Button/button.st.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/button.st.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/button.st.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Example/btn',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\n  args: { onClick: fn() }\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/button.st.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/button.st.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/button.st.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "defaultValue": "[]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/stories/components/Button/button.st.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/stories/components/Button/button.st.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": []
    },
    "coverage": {
        "count": 13,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tailjng/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JButtonComponent",
                "coveragePercent": 35,
                "coverageCount": "7/20",
                "status": "medium"
            },
            {
                "filePath": "src/app/tailjng/color/colors.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JColorsService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/tailjng/form/form-container/container-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JFormContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/tailjng/input/input-range/range-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JRangeInputComponent",
                "coveragePercent": 19,
                "coverageCount": "4/21",
                "status": "low"
            },
            {
                "filePath": "src/app/tailjng/input/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JInputComponent",
                "coveragePercent": 25,
                "coverageCount": "5/20",
                "status": "low"
            },
            {
                "filePath": "src/app/tailjng/label/label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JLabelComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "src/app/tailjng/theme-generator/theme-generator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JThemeGeneratorComponent",
                "coveragePercent": 41,
                "coverageCount": "13/31",
                "status": "medium"
            },
            {
                "filePath": "src/app/tailjng/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "JTooltipDirective",
                "coveragePercent": 52,
                "coverageCount": "18/34",
                "status": "good"
            },
            {
                "filePath": "src/app/tailjng/tooltip/tooltip.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JTooltipService",
                "coveragePercent": 27,
                "coverageCount": "3/11",
                "status": "medium"
            },
            {
                "filePath": "src/stories/components/Button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/components/Button/button.st.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/button.st.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/button.st.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/button.st.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/button.st.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/button.st.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}